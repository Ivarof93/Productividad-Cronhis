import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import os

class ProductividadApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Calculadora de Productividad Médica")
        self.style = ttk.Style()
        self.style.theme_use('clam')

        # Crear marco principal
        self.main_frame = ttk.Frame(self.root, padding="20")
        self.main_frame.pack(fill="both", expand=True)

        # Título de la aplicación
        ttk.Label(self.main_frame, text="Calculadora de Productividad Médica", font=("Helvetica", 16, "bold")).pack(pady=10)

        # Botón para seleccionar archivo Excel
        self.create_button(self.main_frame, "Seleccionar archivo Excel", self.load_excel).pack(pady=10)
        self.file_label = ttk.Label(self.main_frame, text="", font=("Helvetica", 10))
        self.file_label.pack()

        # Botón para mostrar/ocultar el panel de productividad general
        self.create_button(self.main_frame, "Productividad General", self.toggle_productividad_frame).pack(pady=10)
        self.productividad_frame = self.create_productividad_frame(self.main_frame)
        self.productividad_frame.pack_forget()

        # Variable para almacenar la ruta del archivo
        self.file_path = None
        self.df = None  # DataFrame para almacenar los datos del Excel

    def create_button(self, parent, text, command):
        return ttk.Button(parent, text=text, command=command)

    def create_productividad_frame(self, parent):
        frame = ttk.Frame(parent)

        # Botón para calcular productividad de médicos
        self.create_button(frame, "Médicos", self.calculate_medicos_productivity).pack(pady=10)

        # Botón para calcular productividad de urgencias
        # Descomentar la siguiente línea si implementas la función para urgencias
        # self.create_button(frame, "Urgencias", self.calculate_urgencias_productivity).pack(pady=10)

        # Botón para calcular productividad de odontólogos
        self.create_button(frame, "Odontología", self.calculate_odontologia_productivity).pack(pady=10)

        # Botón para calcular productividad de psicólogos
        self.create_button(frame, "Salud Mental", self.calculate_psicologia_productivity).pack(pady=10)

        return frame

    def toggle_productividad_frame(self):
        if self.productividad_frame.winfo_ismapped():
            self.productividad_frame.pack_forget()
            self.root.geometry('400x200')  # Ajustar tamaño de ventana
        else:
            self.productividad_frame.pack(pady=10)
            self.root.geometry('400x400')  # Ajustar tamaño de ventana

    def load_excel(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("Excel files", "*.xlsx;*.xls")])
        if self.file_path:
            self.file_label.config(text=os.path.basename(self.file_path))
            # Leer desde la fila 2 como encabezado y forzar `cup` como texto
            self.df = pd.read_excel(self.file_path, header=1, dtype={'cup': str})
            messagebox.showinfo("Archivo Cargado", "El archivo se ha cargado exitosamente.")

    def calculate_medicos_productivity(self):
        if self.df is not None:
            # Filtrar los médicos que no trabajen en "URGENCIAS"
            filtered_df = self.df[
                (self.df['rol_prof_atiente'] == 'MEDICOS') &
                (self.df['nom_sede'] != 'URGENCIAS SAN FERNANDO')
                ]

            # Dividir en Consultas y Metas
            consultas_df = filtered_df[filtered_df['tipo_servicio'].str.contains('Consultas', na=False)]
            metas_df = filtered_df[
                filtered_df['cup'].isin(['906249', '906317', '906225', '906039', '901111', '906610', '907012'])]

            # Crear un nuevo archivo Excel
            output_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel files", "*.xlsx")])
            if output_path:
                with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
                    workbook = writer.book
                    header_format = workbook.add_format({'bold': True, 'bg_color': '#4F81BD', 'font_color': 'white'})
                    total_format = workbook.add_format({'bg_color': '#D9E1F2', 'bold': True})

                    for medico in filtered_df['prof_atiende'].unique():
                        # Filtrar datos para cada médico
                        medico_consultas = consultas_df[consultas_df['prof_atiende'] == medico]
                        medico_metas = metas_df[metas_df['prof_atiende'] == medico]

                        # Calcular totales para consultas y metas
                        consultas_summary = medico_consultas.groupby('nom_servicio').agg(
                            cantidad=('cantidad', 'sum'),
                            total=('valor', 'sum')
                        ).reset_index()
                        consultas_summary.loc['Total'] = consultas_summary[['cantidad', 'total']].sum()

                        metas_summary = medico_metas.groupby('nom_servicio').agg(
                            cantidad=('cantidad', 'sum'),
                            total=('valor', 'sum')
                        ).reset_index()
                        metas_summary.loc['Total'] = metas_summary[['cantidad', 'total']].sum()

                        # Crear hoja del médico
                        sheet_name = medico[:31]  # Limitar a 31 caracteres
                        consultas_summary.to_excel(writer, sheet_name=sheet_name, index=False, startrow=1, startcol=0)
                        metas_summary.to_excel(writer, sheet_name=sheet_name, index=False,
                                               startrow=len(consultas_summary) + 4, startcol=0)

                        # Acceder a la hoja actual
                        worksheet = writer.sheets[sheet_name]

                        # Añadir títulos y formatos
                        worksheet.write(0, 0, "Consultas", header_format)
                        worksheet.write(len(consultas_summary) + 3, 0, "Metas", header_format)

                        # Sumatoria total de cantidad y total de ambas secciones
                        total_cantidad = consultas_summary.loc['Total', 'cantidad'] + metas_summary.loc[
                            'Total', 'cantidad']
                        total_total = consultas_summary.loc['Total', 'total'] + metas_summary.loc['Total', 'total']

                        # Escribir sumatoria general al final
                        worksheet.write(len(consultas_summary) + len(metas_summary) + 7, 0, "Total General",
                                        header_format)
                        worksheet.write(len(consultas_summary) + len(metas_summary) + 7, 1, total_cantidad,
                                        total_format)
                        worksheet.write(len(consultas_summary) + len(metas_summary) + 7, 2, total_total, total_format)

                        # Formato de columnas
                        worksheet.set_column('A:A', 30)
                        worksheet.set_column('B:B', 20)
                        worksheet.set_column('C:C', 20)

                messagebox.showinfo("Productividad Exportada",
                                    "La productividad de los médicos se ha exportado exitosamente.")
        else:
            messagebox.showwarning("Error", "Por favor, carga un archivo Excel primero.")

    def calculate_odontologia_productivity(self):
        # Implementar lógica para calcular productividad de odontología
        messagebox.showinfo("Funcionalidad no implementada", "La funcionalidad para calcular la productividad de odontología no ha sido implementada todavía.")

    def calculate_psicologia_productivity(self):
        # Implementar lógica para calcular productividad de psicología
        messagebox.showinfo("Funcionalidad no implementada", "La funcionalidad para calcular la productividad de psicología no ha sido implementada todavía.")

if __name__ == "__main__":
    root = tk.Tk()
    app = ProductividadApp(root)
    root.mainloop()
